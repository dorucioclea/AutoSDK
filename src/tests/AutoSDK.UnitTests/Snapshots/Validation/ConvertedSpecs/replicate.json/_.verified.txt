{
  "components": {
    "parameters": {
      "prefer_header": {
        "description": "Leave the request open and wait for the model to finish generating output. Set to \u0060wait=n\u0060 where n is a number of seconds between 1 and 60.\n\nSee https://replicate.com/docs/topics/predictions/create-a-prediction#sync-mode for more information.",
        "in": "header",
        "name": "Prefer",
        "schema": {
          "example": "wait=5",
          "pattern": "^wait(=([1-9]|[1-9][0-9]|60))?$",
          "type": "string"
        }
      }
    },
    "schemas": {
      "prediction_request": {
        "additionalProperties": false,
        "properties": {
          "input": {
            "description": "The model\u0027s input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the \u0022API\u0022 tab on the model you are running or [get the model version](#models.versions.get) and look at its \u0060openapi_schema\u0060 property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes \u0060prompt\u0060 as an input.\n\nFiles should be passed as HTTP URLs or data URLs.\n\nUse an HTTP URL when:\n\n- you have a large file \u003E 256kb\n- you want to be able to use the file multiple times\n- you want your prediction metadata to be associable with your input files\n\nUse a data URL when:\n\n- you have a small file \u003C= 256kb\n- you don\u0027t want to upload and host the file somewhere\n- you don\u0027t need to use the file again (Replicate will not store it)\n",
            "type": "object"
          },
          "stream": {
            "description": "**This field is deprecated.**\n\nRequest a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).\n\nThis field is no longer needed as the returned prediction will always have a \u0060stream\u0060 entry in its \u0060url\u0060 property if the model supports streaming.\n",
            "type": "boolean"
          },
          "webhook": {
            "description": "An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.\n",
            "type": "string"
          },
          "webhook_events_filter": {
            "description": "By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying \u0060webhook_events_filter\u0060 in the prediction request:\n\n- \u0060start\u0060: immediately on prediction start\n- \u0060output\u0060: each time a prediction generates an output (note that predictions can generate multiple outputs)\n- \u0060logs\u0060: each time log output is generated by a prediction\n- \u0060completed\u0060: when the prediction reaches a terminal state (succeeded/canceled/failed)\n\nFor example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:\n\n\u0060\u0060\u0060json\n{\n  \u0022input\u0022: {\n    \u0022text\u0022: \u0022Alice\u0022\n  },\n  \u0022webhook\u0022: \u0022https://example.com/my-webhook\u0022,\n  \u0022webhook_events_filter\u0022: [\u0022start\u0022, \u0022completed\u0022]\n}\n\u0060\u0060\u0060\n\nRequests for event types \u0060output\u0060 and \u0060logs\u0060 will be sent at most once every 500ms. If you request \u0060start\u0060 and \u0060completed\u0060 webhooks, then they\u0027ll always be sent regardless of throttling.\n",
            "items": {
              "enum": [
                "start",
                "output",
                "logs",
                "completed"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "input"
        ],
        "type": "object"
      },
      "training_request": {
        "properties": {
          "destination": {
            "description": "A string representing the desired model to push to in the format \u0060{destination_model_owner}/{destination_model_name}\u0060. This should be an existing model owned by the user or organization making the API request. If the destination is invalid, the server will return an appropriate 4XX response.\n",
            "type": "string"
          },
          "input": {
            "description": "An object containing inputs to the Cog model\u0027s \u0060train()\u0060 function.\n",
            "type": "object"
          },
          "webhook": {
            "description": "An HTTPS URL for receiving a webhook when the training completes. The webhook will be a POST request where the request body is the same as the response body of the [get training](#trainings.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.",
            "type": "string"
          },
          "webhook_events_filter": {
            "description": "By default, we will send requests to your webhook URL whenever there are new outputs or the training has finished. You can change which events trigger webhook requests by specifying \u0060webhook_events_filter\u0060 in the training request:\n\n- \u0060start\u0060: immediately on training start\n- \u0060output\u0060: each time a training generates an output (note that trainings can generate multiple outputs)\n- \u0060logs\u0060: each time log output is generated by a training\n- \u0060completed\u0060: when the training reaches a terminal state (succeeded/canceled/failed)\n\nFor example, if you only wanted requests to be sent at the start and end of the training, you would provide:\n\n\u0060\u0060\u0060json\n{\n  \u0022destination\u0022: \u0022my-organization/my-model\u0022,\n  \u0022input\u0022: {\n    \u0022text\u0022: \u0022Alice\u0022\n  },\n  \u0022webhook\u0022: \u0022https://example.com/my-webhook\u0022,\n  \u0022webhook_events_filter\u0022: [\u0022start\u0022, \u0022completed\u0022]\n}\n\u0060\u0060\u0060\n\nRequests for event types \u0060output\u0060 and \u0060logs\u0060 will be sent at most once every 500ms. If you request \u0060start\u0060 and \u0060completed\u0060 webhooks, then they\u0027ll always be sent regardless of throttling.\n",
            "items": {
              "enum": [
                "start",
                "output",
                "logs",
                "completed"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "destination",
          "input"
        ],
        "type": "object"
      },
      "version_prediction_request": {
        "additionalProperties": false,
        "properties": {
          "input": {
            "description": "The model\u0027s input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the \u0022API\u0022 tab on the model you are running or [get the model version](#models.versions.get) and look at its \u0060openapi_schema\u0060 property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes \u0060prompt\u0060 as an input.\n\nFiles should be passed as HTTP URLs or data URLs.\n\nUse an HTTP URL when:\n\n- you have a large file \u003E 256kb\n- you want to be able to use the file multiple times\n- you want your prediction metadata to be associable with your input files\n\nUse a data URL when:\n\n- you have a small file \u003C= 256kb\n- you don\u0027t want to upload and host the file somewhere\n- you don\u0027t need to use the file again (Replicate will not store it)\n",
            "type": "object"
          },
          "stream": {
            "description": "**This field is deprecated.**\n\nRequest a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).\n\nThis field is no longer needed as the returned prediction will always have a \u0060stream\u0060 entry in its \u0060url\u0060 property if the model supports streaming.\n",
            "type": "boolean"
          },
          "version": {
            "description": "The ID of the model version that you want to run.",
            "type": "string"
          },
          "webhook": {
            "description": "An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. Replicate will not follow redirects when sending webhook requests to your service, so be sure to specify a URL that will resolve without redirecting.\n",
            "type": "string"
          },
          "webhook_events_filter": {
            "description": "By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying \u0060webhook_events_filter\u0060 in the prediction request:\n\n- \u0060start\u0060: immediately on prediction start\n- \u0060output\u0060: each time a prediction generates an output (note that predictions can generate multiple outputs)\n- \u0060logs\u0060: each time log output is generated by a prediction\n- \u0060completed\u0060: when the prediction reaches a terminal state (succeeded/canceled/failed)\n\nFor example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:\n\n\u0060\u0060\u0060json\n{\n  \u0022version\u0022: \u00225c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\u0022,\n  \u0022input\u0022: {\n    \u0022text\u0022: \u0022Alice\u0022\n  },\n  \u0022webhook\u0022: \u0022https://example.com/my-webhook\u0022,\n  \u0022webhook_events_filter\u0022: [\u0022start\u0022, \u0022completed\u0022]\n}\n\u0060\u0060\u0060\n\nRequests for event types \u0060output\u0060 and \u0060logs\u0060 will be sent at most once every 500ms. If you request \u0060start\u0060 and \u0060completed\u0060 webhooks, then they\u0027ll always be sent regardless of throttling.\n",
            "items": {
              "enum": [
                "start",
                "output",
                "logs",
                "completed"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "version",
          "input"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "All API requests must include a valid API token in the \u0060Authorization\u0060 request header. The token must be prefixed by \u0022Bearer\u0022, followed by a space and the token value.\nExample: \u0060Authorization: Bearer r8_Hw***********************************\u0060\nFind your tokens at https://replicate.com/account/api-tokens\n",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "externalDocs": {
    "description": "Replicate HTTP API",
    "url": "https://replicate.com/docs/reference/http"
  },
  "info": {
    "contact": {
      "email": "team@replicate.com"
    },
    "description": "A web service for running Replicate models",
    "termsOfService": "https://replicate.com/terms",
    "title": "Replicate HTTP API",
    "version": "1.0.0-a1"
  },
  "openapi": "3.0.3",
  "paths": {
    "/account": {
      "get": {
        "description": "Returns information about the user or organization associated with the provided API token.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/account\n\u0060\u0060\u0060\n\nThe response will be a JSON object describing the account:\n\n\u0060\u0060\u0060json\n{\n  \u0022type\u0022: \u0022organization\u0022,\n  \u0022username\u0022: \u0022acme\u0022,\n  \u0022name\u0022: \u0022Acme Corp, Inc.\u0022,\n  \u0022github_url\u0022: \u0022https://github.com/acme\u0022,\n}\n\u0060\u0060\u0060\n",
        "operationId": "account.get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "github_url": {
                      "description": "The GitHub URL of the account.",
                      "format": "uri",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the account.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The account type. Can be a user or an organization.",
                      "enum": [
                        "organization",
                        "user"
                      ],
                      "type": "string"
                    },
                    "username": {
                      "description": "The username of the account.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the authenticated account"
      }
    },
    "/collections": {
      "get": {
        "description": "Example cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/collections\n\u0060\u0060\u0060\n\nThe response will be a paginated JSON list of collection objects:\n\n\u0060\u0060\u0060json\n{\n  \u0022next\u0022: \u0022null\u0022,\n  \u0022previous\u0022: null,\n  \u0022results\u0022: [\n    {\n      \u0022name\u0022: \u0022Super resolution\u0022,\n      \u0022slug\u0022: \u0022super-resolution\u0022,\n      \u0022description\u0022: \u0022Upscaling models that create high-quality images from low-quality images.\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060\n",
        "operationId": "collections.list",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "List collections of models"
      }
    },
    "/collections/{collection_slug}": {
      "get": {
        "description": "Example cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/collections/super-resolution\n\u0060\u0060\u0060\n\nThe response will be a collection object with a nested list of the models in that collection:\n\n\u0060\u0060\u0060json\n{\n  \u0022name\u0022: \u0022Super resolution\u0022,\n  \u0022slug\u0022: \u0022super-resolution\u0022,\n  \u0022description\u0022: \u0022Upscaling models that create high-quality images from low-quality images.\u0022,\n  \u0022models\u0022: [...]\n}\n\u0060\u0060\u0060\n",
        "operationId": "collections.get",
        "parameters": [
          {
            "description": "The slug of the collection, like \u0060super-resolution\u0060 or \u0060image-restoration\u0060. See [replicate.com/collections](https://replicate.com/collections).\n",
            "in": "path",
            "name": "collection_slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get a collection of models"
      }
    },
    "/deployments": {
      "get": {
        "description": "Get a list of deployments associated with the current account, including the latest release configuration for each deployment.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/deployments\n\u0060\u0060\u0060\n\nThe response will be a paginated JSON array of deployment objects, sorted with the most recent deployment first:\n\n\u0060\u0060\u0060json\n{\n  \u0022next\u0022: \u0022http://api.replicate.com/v1/deployments?cursor=cD0yMDIzLTA2LTA2KzIzJTNBNDAlM0EwOC45NjMwMDAlMkIwMCUzQTAw\u0022,\n  \u0022previous\u0022: null,\n  \u0022results\u0022: [\n    {\n      \u0022owner\u0022: \u0022replicate\u0022,\n      \u0022name\u0022: \u0022my-app-image-generator\u0022,\n      \u0022current_release\u0022: {\n        \u0022number\u0022: 1,\n        \u0022model\u0022: \u0022stability-ai/sdxl\u0022,\n        \u0022version\u0022: \u0022da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\u0022,\n        \u0022created_at\u0022: \u00222024-02-15T16:32:57.018467Z\u0022,\n        \u0022created_by\u0022: {\n          \u0022type\u0022: \u0022organization\u0022,\n          \u0022username\u0022: \u0022acme\u0022,\n          \u0022name\u0022: \u0022Acme Corp, Inc.\u0022,\n          \u0022github_url\u0022: \u0022https://github.com/acme\u0022,\n        },\n        \u0022configuration\u0022: {\n          \u0022hardware\u0022: \u0022gpu-t4\u0022,\n          \u0022min_instances\u0022: 1,\n          \u0022max_instances\u0022: 5\n        }\n      }\n    }\n  ]\n}\n\u0060\u0060\u0060\n",
        "operationId": "deployments.list",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "next": {
                      "description": "A URL pointing to the next page of deployment objects if any",
                      "nullable": true,
                      "type": "string"
                    },
                    "previous": {
                      "description": "A URL pointing to the previous page of deployment objects if any",
                      "nullable": true,
                      "type": "string"
                    },
                    "results": {
                      "description": "An array containing a page of deployment objects",
                      "items": {
                        "properties": {
                          "current_release": {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "hardware": {
                                    "description": "The SKU for the hardware used to run the model.",
                                    "type": "string"
                                  },
                                  "max_instances": {
                                    "description": "The maximum number of instances for scaling.",
                                    "type": "integer"
                                  },
                                  "min_instances": {
                                    "description": "The minimum number of instances for scaling.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "created_at": {
                                "description": "The time the release was created.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "created_by": {
                                "properties": {
                                  "github_url": {
                                    "description": "The GitHub URL of the account that created the release.",
                                    "format": "uri",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the account that created the release.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "The account type of the creator. Can be a user or an organization.",
                                    "enum": [
                                      "organization",
                                      "user"
                                    ],
                                    "type": "string"
                                  },
                                  "username": {
                                    "description": "The username of the account that created the release.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "model": {
                                "description": "The model identifier string in the format of \u0060{model_owner}/{model_name}\u0060.",
                                "type": "string"
                              },
                              "number": {
                                "description": "The release number. This is an auto-incrementing integer that starts at 1, and is set automatically when a deployment is created.",
                                "type": "integer"
                              },
                              "version": {
                                "description": "The ID of the model version used in the release.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "name": {
                            "description": "The name of the deployment.",
                            "type": "string"
                          },
                          "owner": {
                            "description": "The owner of the deployment.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "List deployments"
      },
      "post": {
        "description": "Create a new deployment:\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -X POST \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  -H \u0022Content-Type: application/json\u0022 \\\n  -d \u0027{\n        \u0022name\u0022: \u0022my-app-image-generator\u0022,\n        \u0022model\u0022: \u0022stability-ai/sdxl\u0022,\n        \u0022version\u0022: \u0022da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\u0022,\n        \u0022hardware\u0022: \u0022gpu-t4\u0022,\n        \u0022min_instances\u0022: 0,\n        \u0022max_instances\u0022: 3\n      }\u0027 \\\n  https://api.replicate.com/v1/deployments\n\u0060\u0060\u0060\n\nThe response will be a JSON object describing the deployment:\n\n\u0060\u0060\u0060json\n{\n  \u0022owner\u0022: \u0022acme\u0022,\n  \u0022name\u0022: \u0022my-app-image-generator\u0022,\n  \u0022current_release\u0022: {\n    \u0022number\u0022: 1,\n    \u0022model\u0022: \u0022stability-ai/sdxl\u0022,\n    \u0022version\u0022: \u0022da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\u0022,\n    \u0022created_at\u0022: \u00222024-02-15T16:32:57.018467Z\u0022,\n    \u0022created_by\u0022: {\n      \u0022type\u0022: \u0022organization\u0022,\n      \u0022username\u0022: \u0022acme\u0022,\n      \u0022name\u0022: \u0022Acme Corp, Inc.\u0022,\n      \u0022github_url\u0022: \u0022https://github.com/acme\u0022,\n    },\n    \u0022configuration\u0022: {\n      \u0022hardware\u0022: \u0022gpu-t4\u0022,\n      \u0022min_instances\u0022: 1,\n      \u0022max_instances\u0022: 5\n    }\n  }\n}\n\u0060\u0060\u0060\n",
        "operationId": "deployments.create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "hardware": {
                    "description": "The SKU for the hardware used to run the model. Possible values can be retrieved from the \u0060hardware.list\u0060 endpoint.",
                    "type": "string"
                  },
                  "max_instances": {
                    "description": "The maximum number of instances for scaling.",
                    "maximum": 20,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "min_instances": {
                    "description": "The minimum number of instances for scaling.",
                    "maximum": 5,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "model": {
                    "description": "The full name of the model that you want to deploy e.g. stability-ai/sdxl.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the deployment.",
                    "type": "string"
                  },
                  "version": {
                    "description": "The 64-character string ID of the model version that you want to deploy.",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "model",
                  "version",
                  "hardware",
                  "min_instances",
                  "max_instances"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "current_release": {
                      "properties": {
                        "configuration": {
                          "properties": {
                            "hardware": {
                              "description": "The SKU for the hardware used to run the model.",
                              "type": "string"
                            },
                            "max_instances": {
                              "description": "The maximum number of instances for scaling.",
                              "type": "integer"
                            },
                            "min_instances": {
                              "description": "The minimum number of instances for scaling.",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The time the release was created.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "created_by": {
                          "properties": {
                            "github_url": {
                              "description": "The GitHub URL of the account that created the release.",
                              "format": "uri",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the account that created the release.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The account type of the creator. Can be a user or an organization.",
                              "enum": [
                                "organization",
                                "user"
                              ],
                              "type": "string"
                            },
                            "username": {
                              "description": "The username of the account that created the release.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "model": {
                          "description": "The model identifier string in the format of \u0060{model_owner}/{model_name}\u0060.",
                          "type": "string"
                        },
                        "number": {
                          "description": "The release number.",
                          "type": "integer"
                        },
                        "version": {
                          "description": "The ID of the model version used in the release.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the deployment.",
                      "type": "string"
                    },
                    "owner": {
                      "description": "The owner of the deployment.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Create a deployment"
      }
    },
    "/deployments/{deployment_owner}/{deployment_name}": {
      "delete": {
        "description": "Delete a deployment\n\nDeployment deletion has some restrictions:\n\n- You can only delete deployments that have been offline and unused for at least 15 minutes.\n\nExample cURL request:\n\n\u0060\u0060\u0060command\ncurl -s -X DELETE \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/deployments/acme/my-app-image-generator\n\u0060\u0060\u0060\n\nThe response will be an empty 204, indicating the deployment has been deleted.\n",
        "operationId": "deployments.delete",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the deployment.\n",
            "in": "path",
            "name": "deployment_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the deployment.\n",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Delete a deployment"
      },
      "get": {
        "description": "Get information about a deployment by name including the current release.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/deployments/replicate/my-app-image-generator\n\u0060\u0060\u0060\n\nThe response will be a JSON object describing the deployment:\n\n\u0060\u0060\u0060json\n{\n  \u0022owner\u0022: \u0022acme\u0022,\n  \u0022name\u0022: \u0022my-app-image-generator\u0022,\n  \u0022current_release\u0022: {\n    \u0022number\u0022: 1,\n    \u0022model\u0022: \u0022stability-ai/sdxl\u0022,\n    \u0022version\u0022: \u0022da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\u0022,\n    \u0022created_at\u0022: \u00222024-02-15T16:32:57.018467Z\u0022,\n    \u0022created_by\u0022: {\n      \u0022type\u0022: \u0022organization\u0022,\n      \u0022username\u0022: \u0022acme\u0022,\n      \u0022name\u0022: \u0022Acme Corp, Inc.\u0022,\n      \u0022github_url\u0022: \u0022https://github.com/acme\u0022,\n    },\n    \u0022configuration\u0022: {\n      \u0022hardware\u0022: \u0022gpu-t4\u0022,\n      \u0022min_instances\u0022: 1,\n      \u0022max_instances\u0022: 5\n    }\n  }\n}\n\u0060\u0060\u0060\n",
        "operationId": "deployments.get",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the deployment.\n",
            "in": "path",
            "name": "deployment_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the deployment.\n",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "current_release": {
                      "properties": {
                        "configuration": {
                          "properties": {
                            "hardware": {
                              "description": "The SKU for the hardware used to run the model.",
                              "type": "string"
                            },
                            "max_instances": {
                              "description": "The maximum number of instances for scaling.",
                              "type": "integer"
                            },
                            "min_instances": {
                              "description": "The minimum number of instances for scaling.",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The time the release was created.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "created_by": {
                          "properties": {
                            "github_url": {
                              "description": "The GitHub URL of the account that created the release.",
                              "format": "uri",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the account that created the release.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The account type of the creator. Can be a user or an organization.",
                              "enum": [
                                "organization",
                                "user"
                              ],
                              "type": "string"
                            },
                            "username": {
                              "description": "The username of the account that created the release.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "model": {
                          "description": "The model identifier string in the format of \u0060{model_owner}/{model_name}\u0060.",
                          "type": "string"
                        },
                        "number": {
                          "description": "The release number.",
                          "type": "integer"
                        },
                        "version": {
                          "description": "The ID of the model version used in the release.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the deployment.",
                      "type": "string"
                    },
                    "owner": {
                      "description": "The owner of the deployment.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get a deployment"
      },
      "patch": {
        "description": "Update properties of an existing deployment, including hardware, min/max instances, and the deployment\u0027s underlying model [version](https://replicate.com/docs/how-does-replicate-work#versions).\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -X PATCH \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  -H \u0022Content-Type: application/json\u0022 \\\n  -d \u0027{\u0022min_instances\u0022: 3, \u0022max_instances\u0022: 10}\u0027 \\\n  https://api.replicate.com/v1/deployments/acme/my-app-image-generator\n\u0060\u0060\u0060\n\nThe response will be a JSON object describing the deployment:\n\n\u0060\u0060\u0060json\n{\n  \u0022owner\u0022: \u0022acme\u0022,\n  \u0022name\u0022: \u0022my-app-image-generator\u0022,\n  \u0022current_release\u0022: {\n    \u0022number\u0022: 2,\n    \u0022model\u0022: \u0022stability-ai/sdxl\u0022,\n    \u0022version\u0022: \u0022da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\u0022,\n    \u0022created_at\u0022: \u00222024-02-15T16:32:57.018467Z\u0022,\n    \u0022created_by\u0022: {\n      \u0022type\u0022: \u0022organization\u0022,\n      \u0022username\u0022: \u0022acme\u0022,\n      \u0022name\u0022: \u0022Acme Corp, Inc.\u0022,\n      \u0022github_url\u0022: \u0022https://github.com/acme\u0022,\n    },\n    \u0022configuration\u0022: {\n      \u0022hardware\u0022: \u0022gpu-t4\u0022,\n      \u0022min_instances\u0022: 3,\n      \u0022max_instances\u0022: 10\n    }\n  }\n}\n\u0060\u0060\u0060\n\nUpdating any deployment properties will increment the \u0060number\u0060 field of the \u0060current_release\u0060.\n",
        "operationId": "deployments.update",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the deployment.\n",
            "in": "path",
            "name": "deployment_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the deployment.\n",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "hardware": {
                    "description": "The SKU for the hardware used to run the model. Possible values can be retrieved from the \u0060hardware.list\u0060 endpoint.",
                    "type": "string"
                  },
                  "max_instances": {
                    "description": "The maximum number of instances for scaling.",
                    "maximum": 20,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "min_instances": {
                    "description": "The minimum number of instances for scaling.",
                    "maximum": 5,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "version": {
                    "description": "The ID of the model version that you want to deploy",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "current_release": {
                      "properties": {
                        "configuration": {
                          "properties": {
                            "hardware": {
                              "description": "The SKU for the hardware used to run the model.",
                              "type": "string"
                            },
                            "max_instances": {
                              "description": "The maximum number of instances for scaling.",
                              "type": "integer"
                            },
                            "min_instances": {
                              "description": "The minimum number of instances for scaling.",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "created_at": {
                          "description": "The time the release was created.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "created_by": {
                          "properties": {
                            "github_url": {
                              "description": "The GitHub URL of the account that created the release.",
                              "format": "uri",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the account that created the release.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The account type of the creator. Can be a user or an organization.",
                              "enum": [
                                "organization",
                                "user"
                              ],
                              "type": "string"
                            },
                            "username": {
                              "description": "The username of the account that created the release.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "model": {
                          "description": "The model identifier string in the format of \u0060{model_owner}/{model_name}\u0060.",
                          "type": "string"
                        },
                        "number": {
                          "description": "The release number.",
                          "type": "integer"
                        },
                        "version": {
                          "description": "The ID of the model version used in the release.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the deployment.",
                      "type": "string"
                    },
                    "owner": {
                      "description": "The owner of the deployment.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Update a deployment"
      }
    },
    "/deployments/{deployment_owner}/{deployment_name}/predictions": {
      "post": {
        "description": "Create a prediction for the deployment and inputs you provide.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s -X POST -H \u0027Prefer: wait\u0027 \\\n  -d \u0027{\u0022input\u0022: {\u0022prompt\u0022: \u0022A photo of a bear riding a bicycle over the moon\u0022}}\u0027 \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  -H \u0027Content-Type: application/json\u0027 \\\n  https://api.replicate.com/v1/deployments/acme/my-app-image-generator/predictions\n\u0060\u0060\u0060\n\nThe request will wait up to 60 seconds for the model to run. If this time is exceeded the prediction will be returned in a \u0060\u0022starting\u0022\u0060 state and need to be retrieved using the \u0060predictions.get\u0060 endpiont.\n\nFor a complete overview of the \u0060deployments.predictions.create\u0060 API check out our documentation on [creating a prediction](https://replicate.com/docs/topics/predictions/create-a-prediction) which covers a variety of use cases.\n",
        "operationId": "deployments.predictions.create",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the deployment.\n",
            "in": "path",
            "name": "deployment_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the deployment.\n",
            "in": "path",
            "name": "deployment_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/prefer_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prediction_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Prediction has been created. If the \u0060Prefer: wait\u0060 header is provided it will contain the final output."
          },
          "202": {
            "description": "Prediction has been created but does not yet have all outputs"
          }
        },
        "summary": "Create a prediction using a deployment"
      }
    },
    "/hardware": {
      "get": {
        "description": "Example cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/hardware\n\u0060\u0060\u0060\n\nThe response will be a JSON array of hardware objects:\n\n\u0060\u0060\u0060json\n[\n    {\u0022name\u0022: \u0022CPU\u0022, \u0022sku\u0022: \u0022cpu\u0022},\n    {\u0022name\u0022: \u0022Nvidia T4 GPU\u0022, \u0022sku\u0022: \u0022gpu-t4\u0022},\n    {\u0022name\u0022: \u0022Nvidia A40 GPU\u0022, \u0022sku\u0022: \u0022gpu-a40-small\u0022},\n    {\u0022name\u0022: \u0022Nvidia A40 (Large) GPU\u0022, \u0022sku\u0022: \u0022gpu-a40-large\u0022},\n]\n\u0060\u0060\u0060\n",
        "operationId": "hardware.list",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "name": {
                        "description": "The name of the hardware.",
                        "type": "string"
                      },
                      "sku": {
                        "description": "The SKU of the hardware.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "List available hardware for models"
      }
    },
    "/models": {
      "get": {
        "description": "Get a paginated list of public models.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/models\n\u0060\u0060\u0060\n\nThe response will be a paginated JSON array of model objects:\n\n\u0060\u0060\u0060json\n{\n  \u0022next\u0022: null,\n  \u0022previous\u0022: null,\n  \u0022results\u0022: [\n    {\n      \u0022url\u0022: \u0022https://replicate.com/acme/hello-world\u0022,\n      \u0022owner\u0022: \u0022acme\u0022,\n      \u0022name\u0022: \u0022hello-world\u0022,\n      \u0022description\u0022: \u0022A tiny model that says hello\u0022,\n      \u0022visibility\u0022: \u0022public\u0022,\n      \u0022github_url\u0022: \u0022https://github.com/replicate/cog-examples\u0022,\n      \u0022paper_url\u0022: null,\n      \u0022license_url\u0022: null,\n      \u0022run_count\u0022: 5681081,\n      \u0022cover_image_url\u0022: \u0022...\u0022,\n      \u0022default_example\u0022: {...},\n      \u0022latest_version\u0022: {...}\n    }\n  ]\n}\n\u0060\u0060\u0060\n\nThe \u0060cover_image_url\u0060 string is an HTTPS URL for an image file. This can be:\n\n- An image uploaded by the model author.\n- The output file of the example prediction, if the model author has not set a cover image.\n- The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file.\n- A generic fallback image.\n",
        "operationId": "models.list",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "List public models"
      },
      "post": {
        "description": "Create a model.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s -X POST \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  -H \u0027Content-Type: application/json\u0027 \\\n  -d \u0027{\u0022owner\u0022: \u0022alice\u0022, \u0022name\u0022: \u0022my-model\u0022, \u0022description\u0022: \u0022An example model\u0022, \u0022visibility\u0022: \u0022public\u0022, \u0022hardware\u0022: \u0022cpu\u0022}\u0027 \\\n  https://api.replicate.com/v1/models\n\u0060\u0060\u0060\n\nThe response will be a model object in the following format:\n\n\u0060\u0060\u0060json\n{\n  \u0022url\u0022: \u0022https://replicate.com/alice/my-model\u0022,\n  \u0022owner\u0022: \u0022alice\u0022,\n  \u0022name\u0022: \u0022my-model\u0022,\n  \u0022description\u0022: \u0022An example model\u0022,\n  \u0022visibility\u0022: \u0022public\u0022,\n  \u0022github_url\u0022: null,\n  \u0022paper_url\u0022: null,\n  \u0022license_url\u0022: null,\n  \u0022run_count\u0022: 0,\n  \u0022cover_image_url\u0022: null,\n  \u0022default_example\u0022: null,\n  \u0022latest_version\u0022: null,\n}\n\u0060\u0060\u0060\n\nNote that there is a limit of 1,000 models per account. For most purposes, we recommend using a single model and pushing new [versions](https://replicate.com/docs/how-does-replicate-work#versions) of the model as you make changes to it.\n",
        "operationId": "models.create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cover_image_url": {
                    "description": "A URL for the model\u0027s cover image. This should be an image file.",
                    "type": "string"
                  },
                  "description": {
                    "description": "A description of the model.",
                    "type": "string"
                  },
                  "github_url": {
                    "description": "A URL for the model\u0027s source code on GitHub.",
                    "type": "string"
                  },
                  "hardware": {
                    "description": "The SKU for the hardware used to run the model. Possible values can be retrieved from the \u0060hardware.list\u0060 endpoint.",
                    "type": "string"
                  },
                  "license_url": {
                    "description": "A URL for the model\u0027s license.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the model. This must be unique among all models owned by the user or organization.",
                    "type": "string"
                  },
                  "owner": {
                    "description": "The name of the user or organization that will own the model. This must be the same as the user or organization that is making the API request. In other words, the API token used in the request must belong to this user or organization.",
                    "type": "string"
                  },
                  "paper_url": {
                    "description": "A URL for the model\u0027s paper.",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Whether the model should be public or private. A public model can be viewed and run by anyone, whereas a private model can be viewed and run only by the user or organization members that own the model.",
                    "enum": [
                      "public",
                      "private"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "owner",
                  "name",
                  "visibility",
                  "hardware"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success"
          }
        },
        "summary": "Create a model"
      },
      "query": {
        "description": "Get a list of public models matching a search query.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s -X QUERY \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  -H \u0022Content-Type: text/plain\u0022 \\\n  -d \u0022hello\u0022 \\\n  https://api.replicate.com/v1/models\n\u0060\u0060\u0060\n\nThe response will be a paginated JSON object containing an array of model objects:\n\n\u0060\u0060\u0060json\n{\n  \u0022next\u0022: null,\n  \u0022previous\u0022: null,\n  \u0022results\u0022: [\n    {\n      \u0022url\u0022: \u0022https://replicate.com/acme/hello-world\u0022,\n      \u0022owner\u0022: \u0022acme\u0022,\n      \u0022name\u0022: \u0022hello-world\u0022,\n      \u0022description\u0022: \u0022A tiny model that says hello\u0022,\n      \u0022visibility\u0022: \u0022public\u0022,\n      \u0022github_url\u0022: \u0022https://github.com/replicate/cog-examples\u0022,\n      \u0022paper_url\u0022: null,\n      \u0022license_url\u0022: null,\n      \u0022run_count\u0022: 5681081,\n      \u0022cover_image_url\u0022: \u0022...\u0022,\n      \u0022default_example\u0022: {...},\n      \u0022latest_version\u0022: {...}\n    }\n  ]\n}\n\u0060\u0060\u0060\n\nThe \u0060cover_image_url\u0060 string is an HTTPS URL for an image file. This can be:\n\n- An image uploaded by the model author.\n- The output file of the example prediction, if the model author has not set a cover image.\n- The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file.\n- A generic fallback image.\n",
        "operationId": "models.search",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "description": "The search query",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Search public models"
      }
    },
    "/models/{model_owner}/{model_name}": {
      "delete": {
        "description": "Delete a model\n\nModel deletion has some restrictions:\n\n- You can only delete models you own.\n- You can only delete private models.\n- You can only delete models that have no versions associated with them. Currently you\u0027ll need to [delete the model\u0027s versions](#models.versions.delete) before you can delete the model itself.\n\nExample cURL request:\n\n\u0060\u0060\u0060command\ncurl -s -X DELETE \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/models/replicate/hello-world\n\u0060\u0060\u0060\n\nThe response will be an empty 204, indicating the model has been deleted.\n",
        "operationId": "models.delete",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the model.\n",
            "in": "path",
            "name": "model_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the model.\n",
            "in": "path",
            "name": "model_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Delete a model"
      },
      "get": {
        "description": "Example cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/models/replicate/hello-world\n\u0060\u0060\u0060\n\nThe response will be a model object in the following format:\n\n\u0060\u0060\u0060json\n{\n  \u0022url\u0022: \u0022https://replicate.com/replicate/hello-world\u0022,\n  \u0022owner\u0022: \u0022replicate\u0022,\n  \u0022name\u0022: \u0022hello-world\u0022,\n  \u0022description\u0022: \u0022A tiny model that says hello\u0022,\n  \u0022visibility\u0022: \u0022public\u0022,\n  \u0022github_url\u0022: \u0022https://github.com/replicate/cog-examples\u0022,\n  \u0022paper_url\u0022: null,\n  \u0022license_url\u0022: null,\n  \u0022run_count\u0022: 5681081,\n  \u0022cover_image_url\u0022: \u0022...\u0022,\n  \u0022default_example\u0022: {...},\n  \u0022latest_version\u0022: {...},\n}\n\u0060\u0060\u0060\n\nThe \u0060cover_image_url\u0060 string is an HTTPS URL for an image file. This can be:\n\n- An image uploaded by the model author.\n- The output file of the example prediction, if the model author has not set a cover image.\n- The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file.\n- A generic fallback image.\n\nThe \u0060default_example\u0060 object is a [prediction](#predictions.get) created with this model.\n\nThe \u0060latest_version\u0060 object is the model\u0027s most recently pushed [version](#models.versions.get).\n",
        "operationId": "models.get",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the model.\n",
            "in": "path",
            "name": "model_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the model.\n",
            "in": "path",
            "name": "model_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get a model"
      }
    },
    "/models/{model_owner}/{model_name}/predictions": {
      "post": {
        "description": "Create a prediction for the deployment and inputs you provide.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s -X POST -H \u0027Prefer: wait\u0027 \\\n  -d \u0027{\u0022input\u0022: {\u0022prompt\u0022: \u0022Write a short poem about the weather.\u0022}}\u0027 \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  -H \u0027Content-Type: application/json\u0027 \\\n  https://api.replicate.com/v1/models/meta/meta-llama-3-70b-instruct/predictions\n\u0060\u0060\u0060\n\nThe request will wait up to 60 seconds for the model to run. If this time is exceeded the prediction will be returned in a \u0060\u0022starting\u0022\u0060 state and need to be retrieved using the \u0060predictions.get\u0060 endpiont.\n\nFor a complete overview of the \u0060deployments.predictions.create\u0060 API check out our documentation on [creating a prediction](https://replicate.com/docs/topics/predictions/create-a-prediction) which covers a variety of use cases.\n",
        "operationId": "models.predictions.create",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the model.\n",
            "in": "path",
            "name": "model_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the model.\n",
            "in": "path",
            "name": "model_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/prefer_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prediction_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Prediction has been created. If the \u0060Prefer: wait\u0060 header is provided it will contain the final output."
          },
          "202": {
            "description": "Prediction has been created but does not yet have all outputs"
          }
        },
        "summary": "Create a prediction using an official model"
      }
    },
    "/models/{model_owner}/{model_name}/versions": {
      "get": {
        "description": "Example cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/models/replicate/hello-world/versions\n\u0060\u0060\u0060\n\nThe response will be a JSON array of model version objects, sorted with the most recent version first:\n\n\u0060\u0060\u0060json\n{\n  \u0022next\u0022: null,\n  \u0022previous\u0022: null,\n  \u0022results\u0022: [\n    {\n      \u0022id\u0022: \u00225c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\u0022,\n      \u0022created_at\u0022: \u00222022-04-26T19:29:04.418669Z\u0022,\n      \u0022cog_version\u0022: \u00220.3.0\u0022,\n      \u0022openapi_schema\u0022: {...}\n    }\n  ]\n}\n\u0060\u0060\u0060\n",
        "operationId": "models.versions.list",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the model.\n",
            "in": "path",
            "name": "model_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the model.\n",
            "in": "path",
            "name": "model_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "List model versions"
      }
    },
    "/models/{model_owner}/{model_name}/versions/{version_id}": {
      "delete": {
        "description": "Delete a model version and all associated predictions, including all output files.\n\nModel version deletion has some restrictions:\n\n- You can only delete versions from models you own.\n- You can only delete versions from private models.\n- You cannot delete a version if someone other than you has run predictions with it.\n- You cannot delete a version if it is being used as the base model for a fine tune/training.\n- You cannot delete a version if it has an associated deployment.\n- You cannot delete a version if another model version is overridden to use it.\n\nExample cURL request:\n\n\u0060\u0060\u0060command\ncurl -s -X DELETE \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\n\u0060\u0060\u0060\n\nThe response will be an empty 202, indicating the deletion request has been accepted. It might take a few minutes to be processed.\n",
        "operationId": "models.versions.delete",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the model.\n",
            "in": "path",
            "name": "model_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the model.\n",
            "in": "path",
            "name": "model_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the version.\n",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Deletion request has been accepted. It might take a few minutes to be processed."
          }
        },
        "summary": "Delete a model version"
      },
      "get": {
        "description": "Example cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\n\u0060\u0060\u0060\n\nThe response will be the version object:\n\n\u0060\u0060\u0060json\n{\n  \u0022id\u0022: \u00225c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\u0022,\n  \u0022created_at\u0022: \u00222022-04-26T19:29:04.418669Z\u0022,\n  \u0022cog_version\u0022: \u00220.3.0\u0022,\n  \u0022openapi_schema\u0022: {...}\n}\n\u0060\u0060\u0060\n\nEvery model describes its inputs and outputs with [OpenAPI Schema Objects](https://spec.openapis.org/oas/latest.html#schemaObject) in the \u0060openapi_schema\u0060 property.\n\nThe \u0060openapi_schema.components.schemas.Input\u0060 property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:\n\n\u0060\u0060\u0060json\n{\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022title\u0022: \u0022Input\u0022,\n  \u0022required\u0022: [\n    \u0022text\u0022\n  ],\n  \u0022properties\u0022: {\n    \u0022text\u0022: {\n      \u0022x-order\u0022: 0,\n      \u0022type\u0022: \u0022string\u0022,\n      \u0022title\u0022: \u0022Text\u0022,\n      \u0022description\u0022: \u0022Text to prefix with \u0027hello \u0027\u0022\n    }\n  }\n}\n\u0060\u0060\u0060\n\nThe \u0060openapi_schema.components.schemas.Output\u0060 property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:\n\n\u0060\u0060\u0060json\n{\n  \u0022type\u0022: \u0022string\u0022,\n  \u0022title\u0022: \u0022Output\u0022\n}\n\u0060\u0060\u0060\n\nFor more details, see the docs on [Cog\u0027s supported input and output types](https://github.com/replicate/cog/blob/75b7802219e7cd4cee845e34c4c22139558615d4/docs/python.md#input-and-output-types)\n",
        "operationId": "models.versions.get",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the model.\n",
            "in": "path",
            "name": "model_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the model.\n",
            "in": "path",
            "name": "model_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the version.\n",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get a model version"
      }
    },
    "/models/{model_owner}/{model_name}/versions/{version_id}/trainings": {
      "post": {
        "description": "Start a new training of the model version you specify.\n\nExample request body:\n\n\u0060\u0060\u0060json\n{\n  \u0022destination\u0022: \u0022{new_owner}/{new_name}\u0022,\n  \u0022input\u0022: {\n    \u0022train_data\u0022: \u0022https://example.com/my-input-images.zip\u0022,\n  },\n  \u0022webhook\u0022: \u0022https://example.com/my-webhook\u0022,\n}\n\u0060\u0060\u0060\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s -X POST \\\n  -d \u0027{\u0022destination\u0022: \u0022{new_owner}/{new_name}\u0022, \u0022input\u0022: {\u0022input_images\u0022: \u0022https://example.com/my-input-images.zip\u0022}}\u0027 \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  -H \u0027Content-Type: application/json\u0027 \\\n  https://api.replicate.com/v1/models/stability-ai/sdxl/versions/da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf/trainings\n\u0060\u0060\u0060\n\nThe response will be the training object:\n\n\u0060\u0060\u0060json\n{\n  \u0022id\u0022: \u0022zz4ibbonubfz7carwiefibzgga\u0022,\n  \u0022model\u0022: \u0022stability-ai/sdxl\u0022,\n  \u0022version\u0022: \u0022da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\u0022,\n  \u0022input\u0022: {\n    \u0022input_images\u0022: \u0022https://example.com/my-input-images.zip\u0022\n  },\n  \u0022logs\u0022: \u0022\u0022,\n  \u0022error\u0022: null,\n  \u0022status\u0022: \u0022starting\u0022,\n  \u0022created_at\u0022: \u00222023-09-08T16:32:56.990893084Z\u0022,\n  \u0022urls\u0022: {\n    \u0022cancel\u0022: \u0022https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga/cancel\u0022,\n    \u0022get\u0022: \u0022https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga\u0022\n  }\n}\n\u0060\u0060\u0060\n\nAs models can take several minutes or more to train, the result will not be available immediately. To get the final result of the training you should either provide a \u0060webhook\u0060 HTTPS URL for us to call when the results are ready, or poll the [get a training](#trainings.get) endpoint until it has finished.\n\nWhen a training completes, it creates a new [version](https://replicate.com/docs/how-does-replicate-work#terminology) of the model at the specified destination.\n\nTo find some models to train on, check out the [trainable language models collection](https://replicate.com/collections/trainable-language-models).\n",
        "operationId": "trainings.create",
        "parameters": [
          {
            "description": "The name of the user or organization that owns the model.\n",
            "in": "path",
            "name": "model_owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the model.\n",
            "in": "path",
            "name": "model_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the version.\n",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/training_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          }
        },
        "summary": "Create a training"
      }
    },
    "/predictions": {
      "get": {
        "description": "Get a paginated list of predictions that you\u0027ve created. This will include predictions created from the API and the website. It will return 100 records per page.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/predictions\n\u0060\u0060\u0060\n\nThe response will be a paginated JSON array of prediction objects, sorted with the most recent prediction first:\n\n\u0060\u0060\u0060json\n{\n  \u0022next\u0022: null,\n  \u0022previous\u0022: null,\n  \u0022results\u0022: [\n    {\n      \u0022completed_at\u0022: \u00222023-09-08T16:19:34.791859Z\u0022,\n      \u0022created_at\u0022: \u00222023-09-08T16:19:34.907244Z\u0022,\n      \u0022data_removed\u0022: false,\n      \u0022error\u0022: null,\n      \u0022id\u0022: \u0022gm3qorzdhgbfurvjtvhg6dckhu\u0022,\n      \u0022input\u0022: {\n        \u0022text\u0022: \u0022Alice\u0022\n      },\n      \u0022metrics\u0022: {\n        \u0022predict_time\u0022: 0.012683\n      },\n      \u0022output\u0022: \u0022hello Alice\u0022,\n      \u0022started_at\u0022: \u00222023-09-08T16:19:34.779176Z\u0022,\n      \u0022source\u0022: \u0022api\u0022,\n      \u0022status\u0022: \u0022succeeded\u0022,\n      \u0022urls\u0022: {\n        \u0022get\u0022: \u0022https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\u0022,\n        \u0022cancel\u0022: \u0022https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\u0022\n      },\n      \u0022model\u0022: \u0022replicate/hello-world\u0022,\n      \u0022version\u0022: \u00225c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\u0022,\n    }\n  ]\n}\n\u0060\u0060\u0060\n\n\u0060id\u0060 will be the unique ID of the prediction.\n\n\u0060source\u0060 will indicate how the prediction was created. Possible values are \u0060web\u0060 or \u0060api\u0060.\n\n\u0060status\u0060 will be the status of the prediction. Refer to [get a single prediction](#predictions.get) for possible values.\n\n\u0060urls\u0060 will be a convenience object that can be used to construct new API requests for the given prediction. If the requested model version supports streaming, this will have a \u0060stream\u0060 entry with an HTTPS URL that you can use to construct an [\u0060EventSource\u0060](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).\n\n\u0060model\u0060 will be the model identifier string in the format of \u0060{model_owner}/{model_name}\u0060.\n\n\u0060version\u0060 will be the unique ID of model version used to create the prediction.\n\n\u0060data_removed\u0060 will be \u0060true\u0060 if the input and output data has been deleted.\n",
        "operationId": "predictions.list",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "List predictions"
      },
      "post": {
        "description": "Create a prediction for the model version and inputs you provide.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s -X POST -H \u0027Prefer: wait\u0027 \\\n  -d \u0027{\u0022version\u0022: \u00225c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\u0022, \u0022input\u0022: {\u0022text\u0022: \u0022Alice\u0022}}\u0027 \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  -H \u0027Content-Type: application/json\u0027 \\\n  https://api.replicate.com/v1/predictions\n\u0060\u0060\u0060\n\nThe request will wait up to 60 seconds for the model to run. If this time is exceeded the prediction will be returned in a \u0060\u0022starting\u0022\u0060 state and need to be retrieved using the \u0060predictions.get\u0060 endpiont.\n\nFor a complete overview of the \u0060predictions.create\u0060 API check out our documentation on [creating a prediction](https://replicate.com/docs/topics/predictions/create-a-prediction) which covers a variety of use cases.\n",
        "operationId": "predictions.create",
        "parameters": [
          {
            "$ref": "#/components/parameters/prefer_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/version_prediction_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Prediction has been created. If the \u0060Prefer: wait\u0060 header is provided it will contain the final output."
          },
          "202": {
            "description": "Prediction has been created but does not yet have all outputs"
          }
        },
        "summary": "Create a prediction"
      }
    },
    "/predictions/{prediction_id}": {
      "get": {
        "description": "Get the current state of a prediction.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\n\u0060\u0060\u0060\n\nThe response will be the prediction object:\n\n\u0060\u0060\u0060json\n{\n  \u0022id\u0022: \u0022gm3qorzdhgbfurvjtvhg6dckhu\u0022,\n  \u0022model\u0022: \u0022replicate/hello-world\u0022,\n  \u0022version\u0022: \u00225c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\u0022,\n  \u0022input\u0022: {\n    \u0022text\u0022: \u0022Alice\u0022\n  },\n  \u0022logs\u0022: \u0022\u0022,\n  \u0022output\u0022: \u0022hello Alice\u0022,\n  \u0022error\u0022: null,\n  \u0022status\u0022: \u0022succeeded\u0022,\n  \u0022created_at\u0022: \u00222023-09-08T16:19:34.765994Z\u0022,\n  \u0022data_removed\u0022: false,\n  \u0022started_at\u0022: \u00222023-09-08T16:19:34.779176Z\u0022,\n  \u0022completed_at\u0022: \u00222023-09-08T16:19:34.791859Z\u0022,\n  \u0022metrics\u0022: {\n    \u0022predict_time\u0022: 0.012683\n  },\n  \u0022urls\u0022: {\n    \u0022cancel\u0022: \u0022https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\u0022,\n    \u0022get\u0022: \u0022https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\u0022\n  }\n}\n\u0060\u0060\u0060\n\n\u0060status\u0060 will be one of:\n\n- \u0060starting\u0060: the prediction is starting up. If this status lasts longer than a few seconds, then it\u0027s typically because a new worker is being started to run the prediction.\n- \u0060processing\u0060: the \u0060predict()\u0060 method of the model is currently running.\n- \u0060succeeded\u0060: the prediction completed successfully.\n- \u0060failed\u0060: the prediction encountered an error during processing.\n- \u0060canceled\u0060: the prediction was canceled by its creator.\n\nIn the case of success, \u0060output\u0060 will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You\u0027ll need to pass the \u0060Authorization\u0060 header to request them.\n\nIn the case of failure, \u0060error\u0060 will contain the error encountered during the prediction.\n\nTerminated predictions (with a status of \u0060succeeded\u0060, \u0060failed\u0060, or \u0060canceled\u0060) will include a \u0060metrics\u0060 object with a \u0060predict_time\u0060 property showing the amount of CPU or GPU time, in seconds, that the prediction used while running. It won\u0027t include time waiting for the prediction to start.\n\nAll input parameters, output values, and logs are automatically removed after an hour, by default, for predictions created through the API.\n\nYou must save a copy of any data or files in the output if you\u0027d like to continue using them. The \u0060output\u0060 key will still be present, but it\u0027s value will be \u0060null\u0060 after the output has been removed.\n\nOutput files are served by \u0060replicate.delivery\u0060 and its subdomains. If you use an allow list of external domains for your assets, add \u0060replicate.delivery\u0060 and \u0060*.replicate.delivery\u0060 to it.\n",
        "operationId": "predictions.get",
        "parameters": [
          {
            "description": "The ID of the prediction to get.\n",
            "in": "path",
            "name": "prediction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get a prediction"
      }
    },
    "/predictions/{prediction_id}/cancel": {
      "post": {
        "operationId": "predictions.cancel",
        "parameters": [
          {
            "description": "The ID of the prediction to cancel.\n",
            "in": "path",
            "name": "prediction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Cancel a prediction"
      }
    },
    "/trainings": {
      "get": {
        "description": "Get a paginated list of trainings that you\u0027ve created. This will include trainings created from the API and the website. It will return 100 records per page.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/trainings\n\u0060\u0060\u0060\n\nThe response will be a paginated JSON array of training objects, sorted with the most recent training first:\n\n\u0060\u0060\u0060json\n{\n  \u0022next\u0022: null,\n  \u0022previous\u0022: null,\n  \u0022results\u0022: [\n    {\n      \u0022completed_at\u0022: \u00222023-09-08T16:41:19.826523Z\u0022,\n      \u0022created_at\u0022: \u00222023-09-08T16:32:57.018467Z\u0022,\n      \u0022error\u0022: null,\n      \u0022id\u0022: \u0022zz4ibbonubfz7carwiefibzgga\u0022,\n      \u0022input\u0022: {\n        \u0022input_images\u0022: \u0022https://example.com/my-input-images.zip\u0022\n      },\n      \u0022metrics\u0022: {\n        \u0022predict_time\u0022: 502.713876\n      },\n      \u0022output\u0022: {\n        \u0022version\u0022: \u0022...\u0022,\n        \u0022weights\u0022: \u0022...\u0022\n      },\n      \u0022started_at\u0022: \u00222023-09-08T16:32:57.112647Z\u0022,\n      \u0022source\u0022: \u0022api\u0022,\n      \u0022status\u0022: \u0022succeeded\u0022,\n      \u0022urls\u0022: {\n        \u0022get\u0022: \u0022https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\u0022,\n        \u0022cancel\u0022: \u0022https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel\u0022\n      },\n      \u0022model\u0022: \u0022stability-ai/sdxl\u0022,\n      \u0022version\u0022: \u0022da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\u0022,\n    }\n  ]\n}\n\u0060\u0060\u0060\n\n\u0060id\u0060 will be the unique ID of the training.\n\n\u0060source\u0060 will indicate how the training was created. Possible values are \u0060web\u0060 or \u0060api\u0060.\n\n\u0060status\u0060 will be the status of the training. Refer to [get a single training](#trainings.get) for possible values.\n\n\u0060urls\u0060 will be a convenience object that can be used to construct new API requests for the given training.\n\n\u0060version\u0060 will be the unique ID of model version used to create the training.\n",
        "operationId": "trainings.list",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "List trainings"
      }
    },
    "/trainings/{training_id}": {
      "get": {
        "description": "Get the current state of a training.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\n\u0060\u0060\u0060\n\nThe response will be the training object:\n\n\u0060\u0060\u0060json\n{\n  \u0022completed_at\u0022: \u00222023-09-08T16:41:19.826523Z\u0022,\n  \u0022created_at\u0022: \u00222023-09-08T16:32:57.018467Z\u0022,\n  \u0022error\u0022: null,\n  \u0022id\u0022: \u0022zz4ibbonubfz7carwiefibzgga\u0022,\n  \u0022input\u0022: {\n    \u0022input_images\u0022: \u0022https://example.com/my-input-images.zip\u0022\n  },\n  \u0022logs\u0022: \u0022...\u0022,\n  \u0022metrics\u0022: {\n    \u0022predict_time\u0022: 502.713876\n  },\n  \u0022output\u0022: {\n    \u0022version\u0022: \u0022...\u0022,\n    \u0022weights\u0022: \u0022...\u0022\n  },\n  \u0022started_at\u0022: \u00222023-09-08T16:32:57.112647Z\u0022,\n  \u0022status\u0022: \u0022succeeded\u0022,\n  \u0022urls\u0022: {\n    \u0022get\u0022: \u0022https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\u0022,\n    \u0022cancel\u0022: \u0022https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel\u0022\n  },\n  \u0022model\u0022: \u0022stability-ai/sdxl\u0022,\n  \u0022version\u0022: \u0022da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\u0022,\n}\n\u0060\u0060\u0060\n\n\u0060status\u0060 will be one of:\n\n- \u0060starting\u0060: the training is starting up. If this status lasts longer than a few seconds, then it\u0027s typically because a new worker is being started to run the training.\n- \u0060processing\u0060: the \u0060train()\u0060 method of the model is currently running.\n- \u0060succeeded\u0060: the training completed successfully.\n- \u0060failed\u0060: the training encountered an error during processing.\n- \u0060canceled\u0060: the training was canceled by its creator.\n\nIn the case of success, \u0060output\u0060 will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You\u0027ll need to pass the \u0060Authorization\u0060 header to request them.\n\nIn the case of failure, \u0060error\u0060 will contain the error encountered during the training.\n\nTerminated trainings (with a status of \u0060succeeded\u0060, \u0060failed\u0060, or \u0060canceled\u0060) will include a \u0060metrics\u0060 object with a \u0060predict_time\u0060 property showing the amount of CPU or GPU time, in seconds, that the training used while running. It won\u0027t include time waiting for the training to start.\n",
        "operationId": "trainings.get",
        "parameters": [
          {
            "description": "The ID of the training to get.\n",
            "in": "path",
            "name": "training_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Get a training"
      }
    },
    "/trainings/{training_id}/cancel": {
      "post": {
        "operationId": "trainings.cancel",
        "parameters": [
          {
            "description": "The ID of the training you want to cancel.\n",
            "in": "path",
            "name": "training_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Cancel a training"
      }
    },
    "/webhooks/default/secret": {
      "get": {
        "description": "Get the signing secret for the default webhook endpoint. This is used to verify that webhook requests are coming from Replicate.\n\nExample cURL request:\n\n\u0060\u0060\u0060console\ncurl -s \\\n  -H \u0022Authorization: Bearer $REPLICATE_API_TOKEN\u0022 \\\n  https://api.replicate.com/v1/webhooks/default/secret\n\u0060\u0060\u0060\n\nThe response will be a JSON object with a \u0060key\u0060 property:\n\n\u0060\u0060\u0060json\n{\n  \u0022key\u0022: \u0022...\u0022\n}\n\u0060\u0060\u0060\n",
        "operationId": "webhooks.default.secret.get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "key": {
                      "description": "The signing secret.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Get the signing secret for the default webhook"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://api.replicate.com/v1"
    }
  ]
}